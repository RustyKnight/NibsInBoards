//
//  InputViewKit.swift
//  InputView
//
//  Created by AuthorName on 11/5/18.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class InputViewKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfInputViewForeground: UIImage?
        static var inputViewForegroundTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawInputViewForeground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 42, height: 42), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 42, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 42, y: resizedFrame.height / 42)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.753, green: 0.753, blue: 0.753, alpha: 1.000)
        let gradientColor2 = UIColor(red: 0.376, green: 0.376, blue: 0.376, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 1])!

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 9.22, y: 4.84), controlPoint1: CGPoint(x: 16.59, y: 1), controlPoint2: CGPoint(x: 12.52, y: 2.42))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 21), controlPoint1: CGPoint(x: 4.24, y: 8.48), controlPoint2: CGPoint(x: 1, y: 14.36))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 41), controlPoint1: CGPoint(x: 1, y: 32.05), controlPoint2: CGPoint(x: 9.95, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 41, y: 21), controlPoint1: CGPoint(x: 32.05, y: 41), controlPoint2: CGPoint(x: 41, y: 32.05))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 1), controlPoint1: CGPoint(x: 41, y: 9.95), controlPoint2: CGPoint(x: 32.05, y: 1))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 42, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 42), controlPoint1: CGPoint(x: 42, y: 0), controlPoint2: CGPoint(x: 42, y: 42))
        bezierPath.addLine(to: CGPoint(x: 0, y: 42))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 42, y: 0))
        bezierPath.addLine(to: CGPoint(x: 42, y: 0))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 21, y: -0), end: CGPoint(x: 21, y: 42), options: [])
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfInputViewForeground: UIImage {
        if Cache.imageOfInputViewForeground != nil {
            return Cache.imageOfInputViewForeground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 42, height: 42), false, 0)
            InputViewKit.drawInputViewForeground()

        Cache.imageOfInputViewForeground = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20), resizingMode: .stretch).withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfInputViewForeground!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var inputViewForegroundTargets: [AnyObject]! {
        get { return Cache.inputViewForegroundTargets }
        set {
            Cache.inputViewForegroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: InputViewKit.imageOfInputViewForeground)
            }
        }
    }




    @objc(InputViewKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
